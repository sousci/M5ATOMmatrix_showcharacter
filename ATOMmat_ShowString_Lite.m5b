{"category":"ATOMmat_ShowString","color":"#c954c5","blocks":["__ATOMmat_ShowString_ATOM_setup","__ATOMmat_ShowString_print"],"jscode":"// Block __ATOMmat_ShowString_ATOM_setup\nvar __ATOMmat_ShowString_ATOM_setup_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"ATOM_setup\"\n        }\n    ],\n    \"colour\": \"#c954c5\"\n};\n\nwindow['Blockly'].Blocks['__ATOMmat_ShowString_ATOM_setup'] = {\n    init: function() {\n        this.jsonInit(__ATOMmat_ShowString_ATOM_setup_json);\n    }\n};\n\nwindow['Blockly'].Python['__ATOMmat_ShowString_ATOM_setup'] = function(block) {\n        return `import math\n\ncharacter_lib = {\n  '0':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  '1':[[0,0,1,0,0],[0,1,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,1,1,1,0]],\n  '2':[[1,1,1,0,0],[0,0,0,1,0],[0,1,1,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  '3':[[1,1,1,1,0],[0,0,0,1,0],[0,0,1,0,0],[1,0,0,1,0],[0,1,1,0,0]],\n  '4':[[0,0,1,1,0],[0,1,0,1,0],[1,0,0,1,0],[1,1,1,1,1],[0,0,0,1,0]],\n  '5':[[1,1,1,1,1],[1,0,0,0,0],[1,1,1,1,0],[0,0,0,0,1],[1,1,1,1,0]],\n  '6':[[0,0,0,1,0],[0,0,1,0,0],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n  '7':[[1,1,1,1,1],[0,0,0,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0]],\n  '8':[[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n  '9':[[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[0,0,1,0,0],[0,1,0,0,0]],\n  'A':[[0,1,1,0,0],[1,0,0,1,0],[1,1,1,1,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'B':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0]],\n  'C':[[0,1,1,1,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[0,1,1,1,0]],\n  'D':[[1,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[1,1,1,0,0]],\n  'E':[[1,1,1,1,0],[1,0,0,0,0],[1,1,1,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  'F':[[1,1,1,1,0],[1,0,0,0,0],[1,1,1,0,0],[1,0,0,0,0],[1,0,0,0,0]],\n  'G':[[0,1,1,1,0],[1,0,0,0,0],[1,0,0,1,1],[1,0,0,0,1],[0,1,1,1,0]],\n  'H':[[1,0,0,1,0],[1,0,0,1,0],[1,1,1,1,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'I':[[1,1,1,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[1,1,1,0,0]],\n  'J':[[1,1,1,1,1],[0,0,0,1,0],[0,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'K':[[1,0,0,1,0],[1,0,1,0,0],[1,1,0,0,0],[1,0,1,0,0],[1,0,0,1,0]],\n  'L':[[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  'M':[[1,0,0,0,1],[1,1,0,1,1],[1,0,1,0,1],[1,0,0,0,1],[1,0,0,0,1]],\n  'N':[[1,0,0,0,1],[1,1,0,0,1],[1,0,1,0,1],[1,0,0,1,1],[1,0,0,0,1]],\n  'O':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'P':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,0,0],[1,0,0,0,0]],\n  'Q':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0],[0,0,1,1,0]],\n  'R':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,1,0],[1,0,0,0,1]],\n  'S':[[0,1,1,1,0],[1,0,0,0,0],[0,1,1,0,0],[0,0,0,1,0],[1,1,1,0,0]],\n  'T':[[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]],\n  'U':[[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'V':[[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0]],\n  'W':[[1,0,0,0,1],[1,0,0,0,1],[1,0,1,0,1],[1,1,0,1,1],[1,0,0,0,1]],\n  'X':[[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'Y':[[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]],\n  'Z':[[1,1,1,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  '-':[[0,0,0,0,0],[0,0,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[0,0,0,0,0]],\n  '’':[[0,1,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\n  '(':[[0,0,1,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,0,1,0,0]],\n  ')':[[0,1,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,1,0,0,0]],\n  '!':[[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,1,0,0,0]]}\n\ndef show_string(string='', interval=200, rotation=False, R=255, G=255, B=255):\n    string = string.upper()\n    color = int('{:x}{:x}{:x}'.format(R,G,B))\n    def Display(temp):\n        if rotation:\n            temp.reverse()\n        rgb.set_screen(temp)\n        wait_ms(interval)\n\n    if len(string) > 1:\n        text_string = \" \" + string + \" \"\n        for i in range(len(string) + 1):\n            mat = []\n            letter1 = character_lib.get(text_string[i],[[0]*5]*5)\n            letter2 = character_lib.get(text_string[i+1],[[0]*5]*5)\n            for n in range(5):\n                mat.append(letter1[n] + [0] + letter2[n])\n            for j in range(6):\n                temp = []\n                for y in range(5):\n                    for x in range(5):\n                        get = mat[y][x + j]\n                        temp.append(color * get)\n                Display(temp)\n    else:\n        temp = []\n        for y in range(5):\n            for x in range(5):\n                get = character_lib.get(string,[[0]*5]*5)[y][x]\n                temp.append(color * get)\n        Display(temp)\n` + \"\\n\";\n};\n\n// Block __ATOMmat_ShowString_print\nvar __ATOMmat_ShowString_print_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"文字列を表示する (String) [ms] (Bool) (0~255)\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"print\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"print\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"scroll\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"scroll\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"rotation\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"rotation\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"R\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"R\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"G\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"G\"\n        }\n    ],\n    \"message6\": \"%1 %2\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"B\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"B\"\n        }\n    ],\n    \"message7\": \"%1\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \" \"\n        }\n    ],\n    \"colour\": \"#c954c5\"\n};\n\nwindow['Blockly'].Blocks['__ATOMmat_ShowString_print'] = {\n    init: function() {\n        this.jsonInit(__ATOMmat_ShowString_print_json);\n    }\n};\n\nwindow['Blockly'].Python['__ATOMmat_ShowString_print'] = function(block) {\n    var print = Blockly.Python.valueToCode(block, 'print', Blockly.Python.ORDER_NONE);\nvar scroll = Blockly.Python.valueToCode(block, 'scroll', Blockly.Python.ORDER_NONE);\nvar rotation = Blockly.Python.valueToCode(block, 'rotation', Blockly.Python.ORDER_NONE);\nvar R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `show_string(${print}, ${scroll}, ${rotation}, ${R}, ${B}, ${B})` + \"\\n\";\n};\n\n","code":{"ATOM_setup":["window['Blockly'].Python['__ATOMmat_ShowString_ATOM_setup'] = function(block) {\n        return `import math\n\ncharacter_lib = {\n  '0':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  '1':[[0,0,1,0,0],[0,1,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,1,1,1,0]],\n  '2':[[1,1,1,0,0],[0,0,0,1,0],[0,1,1,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  '3':[[1,1,1,1,0],[0,0,0,1,0],[0,0,1,0,0],[1,0,0,1,0],[0,1,1,0,0]],\n  '4':[[0,0,1,1,0],[0,1,0,1,0],[1,0,0,1,0],[1,1,1,1,1],[0,0,0,1,0]],\n  '5':[[1,1,1,1,1],[1,0,0,0,0],[1,1,1,1,0],[0,0,0,0,1],[1,1,1,1,0]],\n  '6':[[0,0,0,1,0],[0,0,1,0,0],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n  '7':[[1,1,1,1,1],[0,0,0,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0]],\n  '8':[[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n  '9':[[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[0,0,1,0,0],[0,1,0,0,0]],\n  'A':[[0,1,1,0,0],[1,0,0,1,0],[1,1,1,1,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'B':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0]],\n  'C':[[0,1,1,1,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[0,1,1,1,0]],\n  'D':[[1,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[1,1,1,0,0]],\n  'E':[[1,1,1,1,0],[1,0,0,0,0],[1,1,1,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  'F':[[1,1,1,1,0],[1,0,0,0,0],[1,1,1,0,0],[1,0,0,0,0],[1,0,0,0,0]],\n  'G':[[0,1,1,1,0],[1,0,0,0,0],[1,0,0,1,1],[1,0,0,0,1],[0,1,1,1,0]],\n  'H':[[1,0,0,1,0],[1,0,0,1,0],[1,1,1,1,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'I':[[1,1,1,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[1,1,1,0,0]],\n  'J':[[1,1,1,1,1],[0,0,0,1,0],[0,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'K':[[1,0,0,1,0],[1,0,1,0,0],[1,1,0,0,0],[1,0,1,0,0],[1,0,0,1,0]],\n  'L':[[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  'M':[[1,0,0,0,1],[1,1,0,1,1],[1,0,1,0,1],[1,0,0,0,1],[1,0,0,0,1]],\n  'N':[[1,0,0,0,1],[1,1,0,0,1],[1,0,1,0,1],[1,0,0,1,1],[1,0,0,0,1]],\n  'O':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'P':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,0,0],[1,0,0,0,0]],\n  'Q':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0],[0,0,1,1,0]],\n  'R':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,1,0],[1,0,0,0,1]],\n  'S':[[0,1,1,1,0],[1,0,0,0,0],[0,1,1,0,0],[0,0,0,1,0],[1,1,1,0,0]],\n  'T':[[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]],\n  'U':[[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'V':[[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0]],\n  'W':[[1,0,0,0,1],[1,0,0,0,1],[1,0,1,0,1],[1,1,0,1,1],[1,0,0,0,1]],\n  'X':[[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'Y':[[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]],\n  'Z':[[1,1,1,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  '-':[[0,0,0,0,0],[0,0,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[0,0,0,0,0]],\n  '’':[[0,1,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\n  '(':[[0,0,1,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,0,1,0,0]],\n  ')':[[0,1,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,1,0,0,0]],\n  '!':[[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,1,0,0,0]]}\n\ndef show_string(string='', interval=200, rotation=False, R=255, G=255, B=255):\n    string = string.upper()\n    color = int('{:x}{:x}{:x}'.format(R,G,B))\n    def Display(temp):\n        if rotation:\n            temp.reverse()\n        rgb.set_screen(temp)\n        wait_ms(interval)\n\n    if len(string) > 1:\n        text_string = \" \" + string + \" \"\n        for i in range(len(string) + 1):\n            mat = []\n            letter1 = character_lib.get(text_string[i],[[0]*5]*5)\n            letter2 = character_lib.get(text_string[i+1],[[0]*5]*5)\n            for n in range(5):\n                mat.append(letter1[n] + [0] + letter2[n])\n            for j in range(6):\n                temp = []\n                for y in range(5):\n                    for x in range(5):\n                        get = mat[y][x + j]\n                        temp.append(color * get)\n                Display(temp)\n    else:\n        temp = []\n        for y in range(5):\n            for x in range(5):\n                get = character_lib.get(string,[[0]*5]*5)[y][x]\n                temp.append(color * get)\n        Display(temp)\n` + \"\\n\";\n};\n\n","import math\n\ncharacter_lib = {\n  '0':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  '1':[[0,0,1,0,0],[0,1,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,1,1,1,0]],\n  '2':[[1,1,1,0,0],[0,0,0,1,0],[0,1,1,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  '3':[[1,1,1,1,0],[0,0,0,1,0],[0,0,1,0,0],[1,0,0,1,0],[0,1,1,0,0]],\n  '4':[[0,0,1,1,0],[0,1,0,1,0],[1,0,0,1,0],[1,1,1,1,1],[0,0,0,1,0]],\n  '5':[[1,1,1,1,1],[1,0,0,0,0],[1,1,1,1,0],[0,0,0,0,1],[1,1,1,1,0]],\n  '6':[[0,0,0,1,0],[0,0,1,0,0],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n  '7':[[1,1,1,1,1],[0,0,0,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0]],\n  '8':[[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n  '9':[[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[0,0,1,0,0],[0,1,0,0,0]],\n  'A':[[0,1,1,0,0],[1,0,0,1,0],[1,1,1,1,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'B':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0]],\n  'C':[[0,1,1,1,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[0,1,1,1,0]],\n  'D':[[1,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[1,1,1,0,0]],\n  'E':[[1,1,1,1,0],[1,0,0,0,0],[1,1,1,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  'F':[[1,1,1,1,0],[1,0,0,0,0],[1,1,1,0,0],[1,0,0,0,0],[1,0,0,0,0]],\n  'G':[[0,1,1,1,0],[1,0,0,0,0],[1,0,0,1,1],[1,0,0,0,1],[0,1,1,1,0]],\n  'H':[[1,0,0,1,0],[1,0,0,1,0],[1,1,1,1,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'I':[[1,1,1,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[1,1,1,0,0]],\n  'J':[[1,1,1,1,1],[0,0,0,1,0],[0,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'K':[[1,0,0,1,0],[1,0,1,0,0],[1,1,0,0,0],[1,0,1,0,0],[1,0,0,1,0]],\n  'L':[[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  'M':[[1,0,0,0,1],[1,1,0,1,1],[1,0,1,0,1],[1,0,0,0,1],[1,0,0,0,1]],\n  'N':[[1,0,0,0,1],[1,1,0,0,1],[1,0,1,0,1],[1,0,0,1,1],[1,0,0,0,1]],\n  'O':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'P':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,0,0],[1,0,0,0,0]],\n  'Q':[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0],[0,0,1,1,0]],\n  'R':[[1,1,1,0,0],[1,0,0,1,0],[1,1,1,0,0],[1,0,0,1,0],[1,0,0,0,1]],\n  'S':[[0,1,1,1,0],[1,0,0,0,0],[0,1,1,0,0],[0,0,0,1,0],[1,1,1,0,0]],\n  'T':[[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]],\n  'U':[[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n  'V':[[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0]],\n  'W':[[1,0,0,0,1],[1,0,0,0,1],[1,0,1,0,1],[1,1,0,1,1],[1,0,0,0,1]],\n  'X':[[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0]],\n  'Y':[[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]],\n  'Z':[[1,1,1,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0],[1,1,1,1,0]],\n  '-':[[0,0,0,0,0],[0,0,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[0,0,0,0,0]],\n  '’':[[0,1,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\n  '(':[[0,0,1,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,0,1,0,0]],\n  ')':[[0,1,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,1,0,0,0]],\n  '!':[[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,1,0,0,0]]}\n\ndef show_string(string='', interval=200, rotation=False, R=255, G=255, B=255):\n    string = string.upper()\n    color = int('{:x}{:x}{:x}'.format(R,G,B))\n    def Display(temp):\n        if rotation:\n            temp.reverse()\n        rgb.set_screen(temp)\n        wait_ms(interval)\n\n    if len(string) > 1:\n        text_string = \" \" + string + \" \"\n        for i in range(len(string) + 1):\n            mat = []\n            letter1 = character_lib.get(text_string[i],[[0]*5]*5)\n            letter2 = character_lib.get(text_string[i+1],[[0]*5]*5)\n            for n in range(5):\n                mat.append(letter1[n] + [0] + letter2[n])\n            for j in range(6):\n                temp = []\n                for y in range(5):\n                    for x in range(5):\n                        get = mat[y][x + j]\n                        temp.append(color * get)\n                Display(temp)\n    else:\n        temp = []\n        for y in range(5):\n            for x in range(5):\n                get = character_lib.get(string,[[0]*5]*5)[y][x]\n                temp.append(color * get)\n        Display(temp)\n"],"print":["window['Blockly'].Python['__ATOMmat_ShowString_print'] = function(block) {\n    var print = Blockly.Python.valueToCode(block, 'print', Blockly.Python.ORDER_NONE);\nvar scroll = Blockly.Python.valueToCode(block, 'scroll', Blockly.Python.ORDER_NONE);\nvar rotation = Blockly.Python.valueToCode(block, 'rotation', Blockly.Python.ORDER_NONE);\nvar R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `show_string(${print}, ${scroll}, ${rotation}, ${R}, ${B}, ${B})` + \"\\n\";\n};\n\n","show_string(${print}, ${scroll}, ${rotation}, ${R}, ${B}, ${B})"]}}